
myDCMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000d5e  00000df2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008000b2  008000b2  00000e44  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000169  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000448  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000198  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000581  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000206  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3d       	cpi	r26, 0xD7	; 215
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 91 02 	call	0x522	; 0x522 <main>
  8a:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Read2Nib>:
#define DDR_DATA	DDRD
*/

char Read2Nib(void){
	char HNib, LNib;
	DATA_O |=0xF0;
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	85 bb       	out	0x15, r24	; 21

    DDR_DATA &=0x0F;
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	84 bb       	out	0x14, r24	; 20
	sbi(CTRL,EN); //enable
  9e:	aa 9a       	sbi	0x15, 2	; 21
	sbi(CTRL,EN); // dong nay chi co tac dung delay vi chan EN da o muc cao roi
  a0:	aa 9a       	sbi	0x15, 2	; 21
	

	HNib=DATA_I & 0xF0;
  a2:	93 b3       	in	r25, 0x13	; 19
	cbi(CTRL,EN); //disable
  a4:	aa 98       	cbi	0x15, 2	; 21

	sbi(CTRL,EN); //enable
  a6:	aa 9a       	sbi	0x15, 2	; 21
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
  a8:	aa 9a       	sbi	0x15, 2	; 21
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
  aa:	aa 9a       	sbi	0x15, 2	; 21
	sbi(CTRL,EN); //dong nay chi co tac dung delay vi chan EN da o muc cao roi	
  ac:	aa 9a       	sbi	0x15, 2	; 21
	
	LNib = DATA_I & 0xF0;
  ae:	83 b3       	in	r24, 0x13	; 19
	cbi(CTRL,EN); //disable
  b0:	aa 98       	cbi	0x15, 2	; 21
  b2:	82 95       	swap	r24
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	90 7f       	andi	r25, 0xF0	; 240
	LNib>>=4;
	return (HNib|LNib);
}
  b8:	89 2b       	or	r24, r25
  ba:	08 95       	ret

000000bc <Write2Nib>:

void Write2Nib(uint8_t chr){

	uint8_t HNib, LNib, temp_data;	
	temp_data=DATA_O & 0x0F;
  bc:	25 b3       	in	r18, 0x15	; 21
  be:	2f 70       	andi	r18, 0x0F	; 15

	HNib=chr & 0xF0;
	LNib=(chr<<4) & 0xF0;		
		
	DATA_O =(HNib |temp_data);	
  c0:	98 2f       	mov	r25, r24
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	92 2b       	or	r25, r18
  c6:	95 bb       	out	0x15, r25	; 21
	sbi(CTRL,EN); //enable
  c8:	aa 9a       	sbi	0x15, 2	; 21
	cbi(CTRL,EN); //disable	
  ca:	aa 98       	cbi	0x15, 2	; 21
	
	DATA_O =(LNib|temp_data);		
  cc:	82 95       	swap	r24
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	28 2b       	or	r18, r24
  d2:	25 bb       	out	0x15, r18	; 21
	sbi(CTRL,EN); //enable
  d4:	aa 9a       	sbi	0x15, 2	; 21
	cbi(CTRL,EN); //disable
  d6:	aa 98       	cbi	0x15, 2	; 21
}
  d8:	08 95       	ret

000000da <Write8Bit>:

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
  da:	85 bb       	out	0x15, r24	; 21
	sbi(CTRL,EN); //enable
  dc:	aa 9a       	sbi	0x15, 2	; 21
	cbi(CTRL,EN); //disable
  de:	aa 98       	cbi	0x15, 2	; 21
}
  e0:	08 95       	ret

000000e2 <wait_LCD>:

void wait_LCD(void){
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	df 93       	push	r29
  e8:	cf 93       	push	r28
  ea:	0f 92       	push	r0
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
			temp_val=Read2Nib();
			if (bit_is_clear(temp_val,7)) break;
  f0:	8e 01       	movw	r16, r28
  f2:	0f 5f       	subi	r16, 0xFF	; 255
  f4:	1f 4f       	sbci	r17, 0xFF	; 255
		cbi(CTRL,RW); //ready for next step	
		DDR_DATA=0xFF;//Ready to Out
	#else
		char temp_val;
		while(1){
			cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
  f6:	a8 98       	cbi	0x15, 0	; 21
			sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
  f8:	a9 9a       	sbi	0x15, 1	; 21
			temp_val=Read2Nib();
  fa:	0e 94 49 00 	call	0x92	; 0x92 <Read2Nib>
  fe:	89 83       	std	Y+1, r24	; 0x01
			if (bit_is_clear(temp_val,7)) break;
 100:	f8 01       	movw	r30, r16
 102:	80 81       	ld	r24, Z
 104:	87 fd       	sbrc	r24, 7
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <wait_LCD+0x14>
		}
		cbi(CTRL,RW); //ready for next step	
 108:	a9 98       	cbi	0x15, 1	; 21
		DDR_DATA=0xFF;//Ready to Out		
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 bb       	out	0x14, r24	; 20
	#endif
	
	//_delay_ms(2);
	
}
 10e:	0f 90       	pop	r0
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <init_LCD>:


void init_LCD(void){
	DDR_CTRL=0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	84 bb       	out	0x14, r24	; 20
	DDR_DATA=0xFF;
 11e:	84 bb       	out	0x14, r24	; 20
//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 120:	a8 98       	cbi	0x15, 0	; 21
	cbi(CTRL, RW); // AVR->LCD
 122:	a9 98       	cbi	0x15, 1	; 21
	cbi(CTRL, EN);
 124:	aa 98       	cbi	0x15, 2	; 21
	#ifdef LCD8BIT	
		Write8Bit(0x38);
		wait_LCD();
	#else
		sbi(CTRL,EN); //enable
 126:	aa 9a       	sbi	0x15, 2	; 21
		sbi(DATA_O, 5); 
 128:	ad 9a       	sbi	0x15, 5	; 21
		cbi(CTRL,EN); //disable
 12a:	aa 98       	cbi	0x15, 2	; 21
		wait_LCD();		
 12c:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
		Write2Nib(0x28);//
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();	
 136:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
	#endif
//Display control-------------------------------------------------------------------------	
	cbi(CTRL,RS); // the following data is COMMAND 
 13a:	a8 98       	cbi	0x15, 0	; 21
	#ifdef LCD8BIT	
		Write8Bit(0x0c);
		wait_LCD();
	#else
		Write2Nib(0x0C);
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();			
 142:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
	#endif
//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND 
 146:	a8 98       	cbi	0x15, 0	; 21
	#ifdef LCD8BIT
		Write8Bit(0x06);
		wait_LCD();
	#else
		Write2Nib(0x06);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();
 14e:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
	#endif
}
 152:	08 95       	ret

00000154 <home_LCD>:

void home_LCD(void){
	cbi(CTRL,RS); // the following data is COMMAND 
 154:	a8 98       	cbi	0x15, 0	; 21
	#ifdef LCD8BIT	
		Write8Bit(0x02);
		wait_LCD();	
	#else
		Write2Nib(0x02);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();
 15c:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
	#endif	
}
 160:	08 95       	ret

00000162 <move_LCD>:
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
 162:	a8 98       	cbi	0x15, 0	; 21
	#ifdef LCD8BIT	
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
 164:	61 58       	subi	r22, 0x81	; 129
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	26 e0       	ldi	r18, 0x06	; 6
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	2a 95       	dec	r18
 172:	e1 f7       	brne	.-8      	; 0x16c <move_LCD+0xa>
 174:	86 0f       	add	r24, r22
 176:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();
 17a:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
	#endif	
}
 17e:	08 95       	ret

00000180 <clr_LCD>:

void clr_LCD(void){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 180:	a8 98       	cbi	0x15, 0	; 21
	#ifdef LCD8BIT	
		Write8Bit(0x01);
		wait_LCD();	
	#else
		Write2Nib(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();	
 188:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
		
	#endif	
}
 18c:	08 95       	ret

0000018e <putChar_LCD>:

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA	
 18e:	a8 9a       	sbi	0x15, 0	; 21
	#ifdef LCD8BIT	
		Write8Bit(chr);
		wait_LCD();	
	#else
		Write2Nib(chr);
 190:	0e 94 5e 00 	call	0xbc	; 0xbc <Write2Nib>
		wait_LCD();	
 194:	0e 94 71 00 	call	0xe2	; 0xe2 <wait_LCD>
	#endif		
}
 198:	08 95       	ret

0000019a <print_LCD>:

void print_LCD(char* str){
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <print_LCD+0x12>
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);	 
 1a6:	0e 94 c7 00 	call	0x18e	; 0x18e <putChar_LCD>
 1aa:	1f 5f       	subi	r17, 0xFF	; 255
 1ac:	fe 01       	movw	r30, r28
 1ae:	e1 0f       	add	r30, r17
 1b0:	f1 1d       	adc	r31, r1
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	b9 f7       	brne	.-18     	; 0x1a6 <print_LCD+0xc>
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <Motor_Speed_PID>:
volatile 	long int Ctrl_Speed=5;	 //van toc can dieu khien (desired speed)
volatile    long int Output;
volatile 	unsigned char sample_count=0;

//dieu khien van toc bang PID
void Motor_Speed_PID(long int des_Speed){
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
	rSpeed=Pulse-pre_Pulse;     //tinh van toc (trong sampling time)
 1d0:	20 91 bf 00 	lds	r18, 0x00BF
 1d4:	30 91 c0 00 	lds	r19, 0x00C0
 1d8:	40 91 c1 00 	lds	r20, 0x00C1
 1dc:	50 91 c2 00 	lds	r21, 0x00C2
 1e0:	e0 90 cb 00 	lds	r14, 0x00CB
 1e4:	f0 90 cc 00 	lds	r15, 0x00CC
 1e8:	00 91 cd 00 	lds	r16, 0x00CD
 1ec:	10 91 ce 00 	lds	r17, 0x00CE
 1f0:	2e 19       	sub	r18, r14
 1f2:	3f 09       	sbc	r19, r15
 1f4:	40 0b       	sbc	r20, r16
 1f6:	51 0b       	sbc	r21, r17
 1f8:	20 93 d3 00 	sts	0x00D3, r18
 1fc:	30 93 d4 00 	sts	0x00D4, r19
 200:	40 93 d5 00 	sts	0x00D5, r20
 204:	50 93 d6 00 	sts	0x00D6, r21
	pre_Pulse=Pulse;            //luu lai gia tri Pulse: so xung 
 208:	20 91 bf 00 	lds	r18, 0x00BF
 20c:	30 91 c0 00 	lds	r19, 0x00C0
 210:	40 91 c1 00 	lds	r20, 0x00C1
 214:	50 91 c2 00 	lds	r21, 0x00C2
 218:	20 93 cb 00 	sts	0x00CB, r18
 21c:	30 93 cc 00 	sts	0x00CC, r19
 220:	40 93 cd 00 	sts	0x00CD, r20
 224:	50 93 ce 00 	sts	0x00CE, r21
	Err=des_Speed-rSpeed;  //tinh error (loi)
 228:	20 91 d3 00 	lds	r18, 0x00D3
 22c:	30 91 d4 00 	lds	r19, 0x00D4
 230:	40 91 d5 00 	lds	r20, 0x00D5
 234:	50 91 d6 00 	lds	r21, 0x00D6
 238:	62 1b       	sub	r22, r18
 23a:	73 0b       	sbc	r23, r19
 23c:	84 0b       	sbc	r24, r20
 23e:	95 0b       	sbc	r25, r21
 240:	60 93 c7 00 	sts	0x00C7, r22
 244:	70 93 c8 00 	sts	0x00C8, r23
 248:	80 93 c9 00 	sts	0x00C9, r24
 24c:	90 93 ca 00 	sts	0x00CA, r25
    //cac thanh phan cua PID
	pPart=Kp*Err;
 250:	20 91 a2 00 	lds	r18, 0x00A2
 254:	30 91 a3 00 	lds	r19, 0x00A3
 258:	40 91 a4 00 	lds	r20, 0x00A4
 25c:	50 91 a5 00 	lds	r21, 0x00A5
 260:	60 91 c7 00 	lds	r22, 0x00C7
 264:	70 91 c8 00 	lds	r23, 0x00C8
 268:	80 91 c9 00 	lds	r24, 0x00C9
 26c:	90 91 ca 00 	lds	r25, 0x00CA
 270:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsi3>
 274:	60 93 b2 00 	sts	0x00B2, r22
 278:	70 93 b3 00 	sts	0x00B3, r23
 27c:	80 93 b4 00 	sts	0x00B4, r24
 280:	90 93 b5 00 	sts	0x00B5, r25
	dPart=Kd*(Err-pre_Err)*inv_Sampling_time;
 284:	60 91 a6 00 	lds	r22, 0x00A6
 288:	70 91 a7 00 	lds	r23, 0x00A7
 28c:	80 91 a8 00 	lds	r24, 0x00A8
 290:	90 91 a9 00 	lds	r25, 0x00A9
 294:	e0 90 c7 00 	lds	r14, 0x00C7
 298:	f0 90 c8 00 	lds	r15, 0x00C8
 29c:	00 91 c9 00 	lds	r16, 0x00C9
 2a0:	10 91 ca 00 	lds	r17, 0x00CA
 2a4:	a0 90 c3 00 	lds	r10, 0x00C3
 2a8:	b0 90 c4 00 	lds	r11, 0x00C4
 2ac:	c0 90 c5 00 	lds	r12, 0x00C5
 2b0:	d0 90 c6 00 	lds	r13, 0x00C6
 2b4:	28 e2       	ldi	r18, 0x28	; 40
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsi3>
 2c0:	ea 18       	sub	r14, r10
 2c2:	fb 08       	sbc	r15, r11
 2c4:	0c 09       	sbc	r16, r12
 2c6:	1d 09       	sbc	r17, r13
 2c8:	a8 01       	movw	r20, r16
 2ca:	97 01       	movw	r18, r14
 2cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsi3>
 2d0:	60 93 ba 00 	sts	0x00BA, r22
 2d4:	70 93 bb 00 	sts	0x00BB, r23
 2d8:	80 93 bc 00 	sts	0x00BC, r24
 2dc:	90 93 bd 00 	sts	0x00BD, r25
	//iPart+=Ki*Sampling_time*(Err+pre_Err)/1000;
	iPart+=Ki*Sampling_time*Err/1000;
 2e0:	e0 90 b6 00 	lds	r14, 0x00B6
 2e4:	f0 90 b7 00 	lds	r15, 0x00B7
 2e8:	00 91 b8 00 	lds	r16, 0x00B8
 2ec:	10 91 b9 00 	lds	r17, 0x00B9
 2f0:	60 91 aa 00 	lds	r22, 0x00AA
 2f4:	70 91 ab 00 	lds	r23, 0x00AB
 2f8:	80 91 ac 00 	lds	r24, 0x00AC
 2fc:	90 91 ad 00 	lds	r25, 0x00AD
 300:	20 91 c7 00 	lds	r18, 0x00C7
 304:	30 91 c8 00 	lds	r19, 0x00C8
 308:	40 91 c9 00 	lds	r20, 0x00C9
 30c:	50 91 ca 00 	lds	r21, 0x00CA
 310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsi3>
 314:	29 e1       	ldi	r18, 0x19	; 25
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__mulsi3>
 320:	28 ee       	ldi	r18, 0xE8	; 232
 322:	33 e0       	ldi	r19, 0x03	; 3
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	0e 94 98 03 	call	0x730	; 0x730 <__divmodsi4>
 32c:	e2 0e       	add	r14, r18
 32e:	f3 1e       	adc	r15, r19
 330:	04 1f       	adc	r16, r20
 332:	15 1f       	adc	r17, r21
 334:	e0 92 b6 00 	sts	0x00B6, r14
 338:	f0 92 b7 00 	sts	0x00B7, r15
 33c:	00 93 b8 00 	sts	0x00B8, r16
 340:	10 93 b9 00 	sts	0x00B9, r17
	Output +=pPart+dPart+iPart;     //cong thuc duoc bien doi vi la dieu khien van toc
 344:	a0 90 cf 00 	lds	r10, 0x00CF
 348:	b0 90 d0 00 	lds	r11, 0x00D0
 34c:	c0 90 d1 00 	lds	r12, 0x00D1
 350:	d0 90 d2 00 	lds	r13, 0x00D2
 354:	80 91 b2 00 	lds	r24, 0x00B2
 358:	90 91 b3 00 	lds	r25, 0x00B3
 35c:	a0 91 b4 00 	lds	r26, 0x00B4
 360:	b0 91 b5 00 	lds	r27, 0x00B5
 364:	20 91 ba 00 	lds	r18, 0x00BA
 368:	30 91 bb 00 	lds	r19, 0x00BB
 36c:	40 91 bc 00 	lds	r20, 0x00BC
 370:	50 91 bd 00 	lds	r21, 0x00BD
 374:	e0 90 b6 00 	lds	r14, 0x00B6
 378:	f0 90 b7 00 	lds	r15, 0x00B7
 37c:	00 91 b8 00 	lds	r16, 0x00B8
 380:	10 91 b9 00 	lds	r17, 0x00B9
 384:	8a 0d       	add	r24, r10
 386:	9b 1d       	adc	r25, r11
 388:	ac 1d       	adc	r26, r12
 38a:	bd 1d       	adc	r27, r13
 38c:	82 0f       	add	r24, r18
 38e:	93 1f       	adc	r25, r19
 390:	a4 1f       	adc	r26, r20
 392:	b5 1f       	adc	r27, r21
 394:	8e 0d       	add	r24, r14
 396:	9f 1d       	adc	r25, r15
 398:	a0 1f       	adc	r26, r16
 39a:	b1 1f       	adc	r27, r17
 39c:	80 93 cf 00 	sts	0x00CF, r24
 3a0:	90 93 d0 00 	sts	0x00D0, r25
 3a4:	a0 93 d1 00 	sts	0x00D1, r26
 3a8:	b0 93 d2 00 	sts	0x00D2, r27
    //saturation
	if (Output >=PWM_Period) Output=PWM_Period-1;
 3ac:	80 91 cf 00 	lds	r24, 0x00CF
 3b0:	90 91 d0 00 	lds	r25, 0x00D0
 3b4:	a0 91 d1 00 	lds	r26, 0x00D1
 3b8:	b0 91 d2 00 	lds	r27, 0x00D2
 3bc:	80 54       	subi	r24, 0x40	; 64
 3be:	9f 41       	sbci	r25, 0x1F	; 31
 3c0:	a0 40       	sbci	r26, 0x00	; 0
 3c2:	b0 40       	sbci	r27, 0x00	; 0
 3c4:	64 f0       	brlt	.+24     	; 0x3de <Motor_Speed_PID+0x21e>
 3c6:	8f e3       	ldi	r24, 0x3F	; 63
 3c8:	9f e1       	ldi	r25, 0x1F	; 31
 3ca:	a0 e0       	ldi	r26, 0x00	; 0
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	80 93 cf 00 	sts	0x00CF, r24
 3d2:	90 93 d0 00 	sts	0x00D0, r25
 3d6:	a0 93 d1 00 	sts	0x00D1, r26
 3da:	b0 93 d2 00 	sts	0x00D2, r27
	if (Output <=0) Output=1;
 3de:	80 91 cf 00 	lds	r24, 0x00CF
 3e2:	90 91 d0 00 	lds	r25, 0x00D0
 3e6:	a0 91 d1 00 	lds	r26, 0x00D1
 3ea:	b0 91 d2 00 	lds	r27, 0x00D2
 3ee:	18 16       	cp	r1, r24
 3f0:	19 06       	cpc	r1, r25
 3f2:	1a 06       	cpc	r1, r26
 3f4:	1b 06       	cpc	r1, r27
 3f6:	64 f0       	brlt	.+24     	; 0x410 <Motor_Speed_PID+0x250>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	a0 e0       	ldi	r26, 0x00	; 0
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	80 93 cf 00 	sts	0x00CF, r24
 404:	90 93 d0 00 	sts	0x00D0, r25
 408:	a0 93 d1 00 	sts	0x00D1, r26
 40c:	b0 93 d2 00 	sts	0x00D2, r27
    
    OCR1A=Output; //gan duty cycle cho OCR1A: update PWM    
 410:	80 91 cf 00 	lds	r24, 0x00CF
 414:	90 91 d0 00 	lds	r25, 0x00D0
 418:	a0 91 d1 00 	lds	r26, 0x00D1
 41c:	b0 91 d2 00 	lds	r27, 0x00D2
 420:	9b bd       	out	0x2b, r25	; 43
 422:	8a bd       	out	0x2a, r24	; 42
	pre_Err=Err;  //luu lai gia tri error  
 424:	80 91 c7 00 	lds	r24, 0x00C7
 428:	90 91 c8 00 	lds	r25, 0x00C8
 42c:	a0 91 c9 00 	lds	r26, 0x00C9
 430:	b0 91 ca 00 	lds	r27, 0x00CA
 434:	80 93 c3 00 	sts	0x00C3, r24
 438:	90 93 c4 00 	sts	0x00C4, r25
 43c:	a0 93 c5 00 	sts	0x00C5, r26
 440:	b0 93 c6 00 	sts	0x00C6, r27
}
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	ff 90       	pop	r15
 44a:	ef 90       	pop	r14
 44c:	df 90       	pop	r13
 44e:	cf 90       	pop	r12
 450:	bf 90       	pop	r11
 452:	af 90       	pop	r10
 454:	08 95       	ret

00000456 <__vector_5>:
			sample_count=0;
		}
	}
}

ISR (TIMER2_OVF_vect ){		 //update sampling time---------------
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	ef 93       	push	r30
 476:	ff 93       	push	r31
	TCNT2=60; //gan gia tri khoi tao cho T/C2	
 478:	8c e3       	ldi	r24, 0x3C	; 60
 47a:	84 bd       	out	0x24, r24	; 36
	sample_count++;
 47c:	80 91 be 00 	lds	r24, 0x00BE
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	80 93 be 00 	sts	0x00BE, r24
	Motor_Speed_PID(Ctrl_Speed);
 486:	60 91 ae 00 	lds	r22, 0x00AE
 48a:	70 91 af 00 	lds	r23, 0x00AF
 48e:	80 91 b0 00 	lds	r24, 0x00B0
 492:	90 91 b1 00 	lds	r25, 0x00B1
 496:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Motor_Speed_PID>
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__vector_3>:

ISR(INT2_vect){
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
	if (bit_is_set(PINB,0)) Pulse++;
 4ce:	b0 9b       	sbis	0x16, 0	; 22
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <__vector_3+0x2e>
 4d2:	80 91 bf 00 	lds	r24, 0x00BF
 4d6:	90 91 c0 00 	lds	r25, 0x00C0
 4da:	a0 91 c1 00 	lds	r26, 0x00C1
 4de:	b0 91 c2 00 	lds	r27, 0x00C2
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	a1 1d       	adc	r26, r1
 4e6:	b1 1d       	adc	r27, r1
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <__vector_3+0x44>
	else Pulse--;
 4ea:	80 91 bf 00 	lds	r24, 0x00BF
 4ee:	90 91 c0 00 	lds	r25, 0x00C0
 4f2:	a0 91 c1 00 	lds	r26, 0x00C1
 4f6:	b0 91 c2 00 	lds	r27, 0x00C2
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	a1 09       	sbc	r26, r1
 4fe:	b1 09       	sbc	r27, r1
 500:	80 93 bf 00 	sts	0x00BF, r24
 504:	90 93 c0 00 	sts	0x00C0, r25
 508:	a0 93 c1 00 	sts	0x00C1, r26
 50c:	b0 93 c2 00 	sts	0x00C2, r27
}
 510:	bf 91       	pop	r27
 512:	af 91       	pop	r26
 514:	9f 91       	pop	r25
 516:	8f 91       	pop	r24
 518:	0f 90       	pop	r0
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	0f 90       	pop	r0
 51e:	1f 90       	pop	r1
 520:	18 95       	reti

00000522 <main>:
    OCR1A=Output; //gan duty cycle cho OCR1A: update PWM    
	pre_Err=Err;  //luu lai gia tri error  
}


int main(void){
 522:	ef 92       	push	r14
 524:	ff 92       	push	r15
 526:	0f 93       	push	r16
 528:	1f 93       	push	r17
 52a:	df 93       	push	r29
 52c:	cf 93       	push	r28
 52e:	00 d0       	rcall	.+0      	; 0x530 <main+0xe>
 530:	00 d0       	rcall	.+0      	; 0x532 <main+0x10>
 532:	0f 92       	push	r0
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
    unsigned char dis[5]; //bien tam, hien thi LCD
	Pulse=0;
 538:	10 92 bf 00 	sts	0x00BF, r1
 53c:	10 92 c0 00 	sts	0x00C0, r1
 540:	10 92 c1 00 	sts	0x00C1, r1
 544:	10 92 c2 00 	sts	0x00C2, r1
	//Encoder va cac chan nhap toc do	
	DDRB=0x00; //set PORTB as a input port to use the T0 input pin and INT2
 548:	17 ba       	out	0x17, r1	; 23
	PORTB=0xFF; //dien tro keo len (nhat la encoder)       
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	88 bb       	out	0x18, r24	; 24
	//Motor
    MOTOR_DDR=0xF0;
 54e:	80 ef       	ldi	r24, 0xF0	; 240
 550:	81 bb       	out	0x11, r24	; 17
    sbi(MOTOR_PORT, MOTOR_DIR);
 552:	96 9a       	sbi	0x12, 6	; 18
    
	//ngat ngoai, cho encoder--------------------------------------------------------------
	MCUCSR|=(0<<ISC2); //ngat INT2 la ngat canh xuong - Falling Edge
 554:	84 b7       	in	r24, 0x34	; 52
 556:	84 bf       	out	0x34, r24	; 52
	GICR  |=(1<<INT2);    //Enable INT2
 558:	8b b7       	in	r24, 0x3b	; 59
 55a:	80 62       	ori	r24, 0x20	; 32
 55c:	8b bf       	out	0x3b, r24	; 59
	//---------------------------------------------------------------------------------

	//dung timer 2 lam bo dinh thi 25ms, sampling time--------------------------------
	TCCR2=(1<<CS22)|(1<<CS21)|(1<<CS20); //CS22=1, CS21=1, CS20=1: chon Prescaler=1024 (trang 125 datasheet)
 55e:	87 e0       	ldi	r24, 0x07	; 7
 560:	85 bd       	out	0x25, r24	; 37
	TCNT2=60;           //gan gia tri khoi tao cho T/C2 de duoc 25ms (truong hop f=8MHz)
 562:	8c e3       	ldi	r24, 0x3C	; 60
 564:	84 bd       	out	0x24, r24	; 36
    TIMSK=(1<<TOIE2);  // cho phep ngat khi co tran o T/C2
 566:	80 e4       	ldi	r24, 0x40	; 64
 568:	89 bf       	out	0x39, r24	; 57
    //--------------------------------------------------------------------------------

	//dung timer1 lam PWM generator, Fast PWM mode 14: ICR1 chua time period
	TCCR1A=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 56a:	82 ea       	ldi	r24, 0xA2	; 162
 56c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13) |(1<<WGM12) |(1<<CS10) ;
 56e:	89 e1       	ldi	r24, 0x19	; 25
 570:	8e bd       	out	0x2e, r24	; 46
	//--------------------------------------------------------------------------------    

    //**********LCD*************************
    init_LCD();
 572:	0e 94 8d 00 	call	0x11a	; 0x11a <init_LCD>
	clr_LCD();
 576:	0e 94 c0 00 	call	0x180	; 0x180 <clr_LCD>
	print_LCD("Hocavr.com");
 57a:	80 e6       	ldi	r24, 0x60	; 96
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
    move_LCD(2,1);
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	0e 94 b1 00 	call	0x162	; 0x162 <move_LCD>
    print_LCD("DC Servo Motor");
 58a:	8b e6       	ldi	r24, 0x6B	; 107
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
 592:	80 e1       	ldi	r24, 0x10	; 16
 594:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 596:	28 ec       	ldi	r18, 0xC8	; 200
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	f9 01       	movw	r30, r18
 59c:	31 97       	sbiw	r30, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5a2:	d9 f7       	brne	.-10     	; 0x59a <main+0x78>
    _delay_ms(1000);
    clr_LCD();
 5a4:	0e 94 c0 00 	call	0x180	; 0x180 <clr_LCD>
    print_LCD("Actual :   /25ms");
 5a8:	8a e7       	ldi	r24, 0x7A	; 122
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
    move_LCD(2,1);
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	0e 94 b1 00 	call	0x162	; 0x162 <move_LCD>
    print_LCD("Desired:   /25ms");	
 5b8:	8b e8       	ldi	r24, 0x8B	; 139
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
    //**********LCD*************************    
    
    //---khoi dong gia tri PWM----------
	OCR1A=1;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	9b bd       	out	0x2b, r25	; 43
 5c6:	8a bd       	out	0x2a, r24	; 42
	ICR1=PWM_Period;
 5c8:	80 e4       	ldi	r24, 0x40	; 64
 5ca:	9f e1       	ldi	r25, 0x1F	; 31
 5cc:	97 bd       	out	0x27, r25	; 39
 5ce:	86 bd       	out	0x26, r24	; 38
    sbi(MOTOR_PORT, MOTOR_EN); //khoi dong motor
 5d0:	97 9a       	sbi	0x12, 7	; 18
	sei();
 5d2:	78 94       	sei
	while (1){
		if (sample_count>=10){ //hien thi moi 250ms
            Ctrl_Speed=(PINB>>4) & 0x0F; //doc switches
            
            //------in van toc hien tai (tinh tren 25ms)
			sprintf(dis,"%i", rSpeed);
 5d4:	8e 01       	movw	r16, r28
 5d6:	0f 5f       	subi	r16, 0xFF	; 255
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	3c e9       	ldi	r19, 0x9C	; 156
 5dc:	e3 2e       	mov	r14, r19
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	f3 2e       	mov	r15, r19
    sbi(MOTOR_PORT, MOTOR_EN); //khoi dong motor
	sei();
    //----------------------------------
    
	while (1){
		if (sample_count>=10){ //hien thi moi 250ms
 5e2:	80 91 be 00 	lds	r24, 0x00BE
 5e6:	8a 30       	cpi	r24, 0x0A	; 10
 5e8:	e0 f3       	brcs	.-8      	; 0x5e2 <main+0xc0>
            Ctrl_Speed=(PINB>>4) & 0x0F; //doc switches
 5ea:	86 b3       	in	r24, 0x16	; 22
 5ec:	82 95       	swap	r24
 5ee:	8f 70       	andi	r24, 0x0F	; 15
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	a0 e0       	ldi	r26, 0x00	; 0
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	80 93 ae 00 	sts	0x00AE, r24
 5fa:	90 93 af 00 	sts	0x00AF, r25
 5fe:	a0 93 b0 00 	sts	0x00B0, r26
 602:	b0 93 b1 00 	sts	0x00B1, r27
            
            //------in van toc hien tai (tinh tren 25ms)
			sprintf(dis,"%i", rSpeed);
 606:	40 91 d3 00 	lds	r20, 0x00D3
 60a:	50 91 d4 00 	lds	r21, 0x00D4
 60e:	60 91 d5 00 	lds	r22, 0x00D5
 612:	70 91 d6 00 	lds	r23, 0x00D6
 616:	2d b7       	in	r18, 0x3d	; 61
 618:	3e b7       	in	r19, 0x3e	; 62
 61a:	28 50       	subi	r18, 0x08	; 8
 61c:	30 40       	sbci	r19, 0x00	; 0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	3e bf       	out	0x3e, r19	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	2d bf       	out	0x3d, r18	; 61
 628:	ed b7       	in	r30, 0x3d	; 61
 62a:	fe b7       	in	r31, 0x3e	; 62
 62c:	31 96       	adiw	r30, 0x01	; 1
 62e:	ad b7       	in	r26, 0x3d	; 61
 630:	be b7       	in	r27, 0x3e	; 62
 632:	12 96       	adiw	r26, 0x02	; 2
 634:	1c 93       	st	X, r17
 636:	0e 93       	st	-X, r16
 638:	11 97       	sbiw	r26, 0x01	; 1
 63a:	f3 82       	std	Z+3, r15	; 0x03
 63c:	e2 82       	std	Z+2, r14	; 0x02
 63e:	44 83       	std	Z+4, r20	; 0x04
 640:	55 83       	std	Z+5, r21	; 0x05
 642:	66 83       	std	Z+6, r22	; 0x06
 644:	77 83       	std	Z+7, r23	; 0x07
 646:	0e 94 d5 03 	call	0x7aa	; 0x7aa <sprintf>
			move_LCD(1,9);
 64a:	2d b7       	in	r18, 0x3d	; 61
 64c:	3e b7       	in	r19, 0x3e	; 62
 64e:	28 5f       	subi	r18, 0xF8	; 248
 650:	3f 4f       	sbci	r19, 0xFF	; 255
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	3e bf       	out	0x3e, r19	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	2d bf       	out	0x3d, r18	; 61
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	69 e0       	ldi	r22, 0x09	; 9
 660:	0e 94 b1 00 	call	0x162	; 0x162 <move_LCD>
            print_LCD("  ");
 664:	8f e9       	ldi	r24, 0x9F	; 159
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
            move_LCD(1,9);
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	69 e0       	ldi	r22, 0x09	; 9
 670:	0e 94 b1 00 	call	0x162	; 0x162 <move_LCD>
			print_LCD(dis);
 674:	c8 01       	movw	r24, r16
 676:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
            
            //------in van toc mong muon (tinh tren 25ms)
            sprintf(dis,"%i", Ctrl_Speed);
 67a:	40 91 ae 00 	lds	r20, 0x00AE
 67e:	50 91 af 00 	lds	r21, 0x00AF
 682:	60 91 b0 00 	lds	r22, 0x00B0
 686:	70 91 b1 00 	lds	r23, 0x00B1
 68a:	8d b7       	in	r24, 0x3d	; 61
 68c:	9e b7       	in	r25, 0x3e	; 62
 68e:	08 97       	sbiw	r24, 0x08	; 8
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	9e bf       	out	0x3e, r25	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	8d bf       	out	0x3d, r24	; 61
 69a:	ed b7       	in	r30, 0x3d	; 61
 69c:	fe b7       	in	r31, 0x3e	; 62
 69e:	31 96       	adiw	r30, 0x01	; 1
 6a0:	ad b7       	in	r26, 0x3d	; 61
 6a2:	be b7       	in	r27, 0x3e	; 62
 6a4:	12 96       	adiw	r26, 0x02	; 2
 6a6:	1c 93       	st	X, r17
 6a8:	0e 93       	st	-X, r16
 6aa:	11 97       	sbiw	r26, 0x01	; 1
 6ac:	f3 82       	std	Z+3, r15	; 0x03
 6ae:	e2 82       	std	Z+2, r14	; 0x02
 6b0:	44 83       	std	Z+4, r20	; 0x04
 6b2:	55 83       	std	Z+5, r21	; 0x05
 6b4:	66 83       	std	Z+6, r22	; 0x06
 6b6:	77 83       	std	Z+7, r23	; 0x07
 6b8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <sprintf>
            move_LCD(2,9);
 6bc:	2d b7       	in	r18, 0x3d	; 61
 6be:	3e b7       	in	r19, 0x3e	; 62
 6c0:	28 5f       	subi	r18, 0xF8	; 248
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	3e bf       	out	0x3e, r19	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	2d bf       	out	0x3d, r18	; 61
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	69 e0       	ldi	r22, 0x09	; 9
 6d2:	0e 94 b1 00 	call	0x162	; 0x162 <move_LCD>
            print_LCD("  ");
 6d6:	8f e9       	ldi	r24, 0x9F	; 159
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
            move_LCD(2,9);
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	69 e0       	ldi	r22, 0x09	; 9
 6e2:	0e 94 b1 00 	call	0x162	; 0x162 <move_LCD>
			print_LCD(dis);
 6e6:	c8 01       	movw	r24, r16
 6e8:	0e 94 cd 00 	call	0x19a	; 0x19a <print_LCD>
            
			sample_count=0;
 6ec:	10 92 be 00 	sts	0x00BE, r1
 6f0:	78 cf       	rjmp	.-272    	; 0x5e2 <main+0xc0>

000006f2 <__mulsi3>:
 6f2:	62 9f       	mul	r22, r18
 6f4:	d0 01       	movw	r26, r0
 6f6:	73 9f       	mul	r23, r19
 6f8:	f0 01       	movw	r30, r0
 6fa:	82 9f       	mul	r24, r18
 6fc:	e0 0d       	add	r30, r0
 6fe:	f1 1d       	adc	r31, r1
 700:	64 9f       	mul	r22, r20
 702:	e0 0d       	add	r30, r0
 704:	f1 1d       	adc	r31, r1
 706:	92 9f       	mul	r25, r18
 708:	f0 0d       	add	r31, r0
 70a:	83 9f       	mul	r24, r19
 70c:	f0 0d       	add	r31, r0
 70e:	74 9f       	mul	r23, r20
 710:	f0 0d       	add	r31, r0
 712:	65 9f       	mul	r22, r21
 714:	f0 0d       	add	r31, r0
 716:	99 27       	eor	r25, r25
 718:	72 9f       	mul	r23, r18
 71a:	b0 0d       	add	r27, r0
 71c:	e1 1d       	adc	r30, r1
 71e:	f9 1f       	adc	r31, r25
 720:	63 9f       	mul	r22, r19
 722:	b0 0d       	add	r27, r0
 724:	e1 1d       	adc	r30, r1
 726:	f9 1f       	adc	r31, r25
 728:	bd 01       	movw	r22, r26
 72a:	cf 01       	movw	r24, r30
 72c:	11 24       	eor	r1, r1
 72e:	08 95       	ret

00000730 <__divmodsi4>:
 730:	97 fb       	bst	r25, 7
 732:	09 2e       	mov	r0, r25
 734:	05 26       	eor	r0, r21
 736:	0e d0       	rcall	.+28     	; 0x754 <__divmodsi4_neg1>
 738:	57 fd       	sbrc	r21, 7
 73a:	04 d0       	rcall	.+8      	; 0x744 <__divmodsi4_neg2>
 73c:	14 d0       	rcall	.+40     	; 0x766 <__udivmodsi4>
 73e:	0a d0       	rcall	.+20     	; 0x754 <__divmodsi4_neg1>
 740:	00 1c       	adc	r0, r0
 742:	38 f4       	brcc	.+14     	; 0x752 <__divmodsi4_exit>

00000744 <__divmodsi4_neg2>:
 744:	50 95       	com	r21
 746:	40 95       	com	r20
 748:	30 95       	com	r19
 74a:	21 95       	neg	r18
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	4f 4f       	sbci	r20, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255

00000752 <__divmodsi4_exit>:
 752:	08 95       	ret

00000754 <__divmodsi4_neg1>:
 754:	f6 f7       	brtc	.-4      	; 0x752 <__divmodsi4_exit>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__udivmodsi4>:
 766:	a1 e2       	ldi	r26, 0x21	; 33
 768:	1a 2e       	mov	r1, r26
 76a:	aa 1b       	sub	r26, r26
 76c:	bb 1b       	sub	r27, r27
 76e:	fd 01       	movw	r30, r26
 770:	0d c0       	rjmp	.+26     	; 0x78c <__udivmodsi4_ep>

00000772 <__udivmodsi4_loop>:
 772:	aa 1f       	adc	r26, r26
 774:	bb 1f       	adc	r27, r27
 776:	ee 1f       	adc	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	a2 17       	cp	r26, r18
 77c:	b3 07       	cpc	r27, r19
 77e:	e4 07       	cpc	r30, r20
 780:	f5 07       	cpc	r31, r21
 782:	20 f0       	brcs	.+8      	; 0x78c <__udivmodsi4_ep>
 784:	a2 1b       	sub	r26, r18
 786:	b3 0b       	sbc	r27, r19
 788:	e4 0b       	sbc	r30, r20
 78a:	f5 0b       	sbc	r31, r21

0000078c <__udivmodsi4_ep>:
 78c:	66 1f       	adc	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	1a 94       	dec	r1
 796:	69 f7       	brne	.-38     	; 0x772 <__udivmodsi4_loop>
 798:	60 95       	com	r22
 79a:	70 95       	com	r23
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	9b 01       	movw	r18, r22
 7a2:	ac 01       	movw	r20, r24
 7a4:	bd 01       	movw	r22, r26
 7a6:	cf 01       	movw	r24, r30
 7a8:	08 95       	ret

000007aa <sprintf>:
 7aa:	ae e0       	ldi	r26, 0x0E	; 14
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	eb ed       	ldi	r30, 0xDB	; 219
 7b0:	f3 e0       	ldi	r31, 0x03	; 3
 7b2:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__prologue_saves__+0x1c>
 7b6:	0d 89       	ldd	r16, Y+21	; 0x15
 7b8:	1e 89       	ldd	r17, Y+22	; 0x16
 7ba:	86 e0       	ldi	r24, 0x06	; 6
 7bc:	8c 83       	std	Y+4, r24	; 0x04
 7be:	1a 83       	std	Y+2, r17	; 0x02
 7c0:	09 83       	std	Y+1, r16	; 0x01
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	9f e7       	ldi	r25, 0x7F	; 127
 7c6:	9e 83       	std	Y+6, r25	; 0x06
 7c8:	8d 83       	std	Y+5, r24	; 0x05
 7ca:	9e 01       	movw	r18, r28
 7cc:	27 5e       	subi	r18, 0xE7	; 231
 7ce:	3f 4f       	sbci	r19, 0xFF	; 255
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	6f 89       	ldd	r22, Y+23	; 0x17
 7d6:	78 8d       	ldd	r23, Y+24	; 0x18
 7d8:	a9 01       	movw	r20, r18
 7da:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <vfprintf>
 7de:	2f 81       	ldd	r18, Y+7	; 0x07
 7e0:	38 85       	ldd	r19, Y+8	; 0x08
 7e2:	02 0f       	add	r16, r18
 7e4:	13 1f       	adc	r17, r19
 7e6:	f8 01       	movw	r30, r16
 7e8:	10 82       	st	Z, r1
 7ea:	2e 96       	adiw	r28, 0x0e	; 14
 7ec:	e4 e0       	ldi	r30, 0x04	; 4
 7ee:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__epilogue_restores__+0x1c>

000007f2 <vfprintf>:
 7f2:	ab e0       	ldi	r26, 0x0B	; 11
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
 7f6:	ef ef       	ldi	r30, 0xFF	; 255
 7f8:	f3 e0       	ldi	r31, 0x03	; 3
 7fa:	0c 94 76 06 	jmp	0xcec	; 0xcec <__prologue_saves__>
 7fe:	3c 01       	movw	r6, r24
 800:	2b 01       	movw	r4, r22
 802:	5a 01       	movw	r10, r20
 804:	fc 01       	movw	r30, r24
 806:	17 82       	std	Z+7, r1	; 0x07
 808:	16 82       	std	Z+6, r1	; 0x06
 80a:	83 81       	ldd	r24, Z+3	; 0x03
 80c:	81 fd       	sbrc	r24, 1
 80e:	03 c0       	rjmp	.+6      	; 0x816 <vfprintf+0x24>
 810:	6f ef       	ldi	r22, 0xFF	; 255
 812:	7f ef       	ldi	r23, 0xFF	; 255
 814:	c6 c1       	rjmp	.+908    	; 0xba2 <__stack+0x343>
 816:	9a e0       	ldi	r25, 0x0A	; 10
 818:	89 2e       	mov	r8, r25
 81a:	1e 01       	movw	r2, r28
 81c:	08 94       	sec
 81e:	21 1c       	adc	r2, r1
 820:	31 1c       	adc	r3, r1
 822:	f3 01       	movw	r30, r6
 824:	23 81       	ldd	r18, Z+3	; 0x03
 826:	f2 01       	movw	r30, r4
 828:	23 fd       	sbrc	r18, 3
 82a:	85 91       	lpm	r24, Z+
 82c:	23 ff       	sbrs	r18, 3
 82e:	81 91       	ld	r24, Z+
 830:	2f 01       	movw	r4, r30
 832:	88 23       	and	r24, r24
 834:	09 f4       	brne	.+2      	; 0x838 <vfprintf+0x46>
 836:	b2 c1       	rjmp	.+868    	; 0xb9c <__stack+0x33d>
 838:	85 32       	cpi	r24, 0x25	; 37
 83a:	39 f4       	brne	.+14     	; 0x84a <vfprintf+0x58>
 83c:	23 fd       	sbrc	r18, 3
 83e:	85 91       	lpm	r24, Z+
 840:	23 ff       	sbrs	r18, 3
 842:	81 91       	ld	r24, Z+
 844:	2f 01       	movw	r4, r30
 846:	85 32       	cpi	r24, 0x25	; 37
 848:	29 f4       	brne	.+10     	; 0x854 <vfprintf+0x62>
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	b3 01       	movw	r22, r6
 84e:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 852:	e7 cf       	rjmp	.-50     	; 0x822 <vfprintf+0x30>
 854:	98 2f       	mov	r25, r24
 856:	ff 24       	eor	r15, r15
 858:	ee 24       	eor	r14, r14
 85a:	99 24       	eor	r9, r9
 85c:	ff e1       	ldi	r31, 0x1F	; 31
 85e:	ff 15       	cp	r31, r15
 860:	d0 f0       	brcs	.+52     	; 0x896 <__stack+0x37>
 862:	9b 32       	cpi	r25, 0x2B	; 43
 864:	69 f0       	breq	.+26     	; 0x880 <__stack+0x21>
 866:	9c 32       	cpi	r25, 0x2C	; 44
 868:	28 f4       	brcc	.+10     	; 0x874 <__stack+0x15>
 86a:	90 32       	cpi	r25, 0x20	; 32
 86c:	59 f0       	breq	.+22     	; 0x884 <__stack+0x25>
 86e:	93 32       	cpi	r25, 0x23	; 35
 870:	91 f4       	brne	.+36     	; 0x896 <__stack+0x37>
 872:	0e c0       	rjmp	.+28     	; 0x890 <__stack+0x31>
 874:	9d 32       	cpi	r25, 0x2D	; 45
 876:	49 f0       	breq	.+18     	; 0x88a <__stack+0x2b>
 878:	90 33       	cpi	r25, 0x30	; 48
 87a:	69 f4       	brne	.+26     	; 0x896 <__stack+0x37>
 87c:	41 e0       	ldi	r20, 0x01	; 1
 87e:	24 c0       	rjmp	.+72     	; 0x8c8 <__stack+0x69>
 880:	52 e0       	ldi	r21, 0x02	; 2
 882:	f5 2a       	or	r15, r21
 884:	84 e0       	ldi	r24, 0x04	; 4
 886:	f8 2a       	or	r15, r24
 888:	28 c0       	rjmp	.+80     	; 0x8da <__stack+0x7b>
 88a:	98 e0       	ldi	r25, 0x08	; 8
 88c:	f9 2a       	or	r15, r25
 88e:	25 c0       	rjmp	.+74     	; 0x8da <__stack+0x7b>
 890:	e0 e1       	ldi	r30, 0x10	; 16
 892:	fe 2a       	or	r15, r30
 894:	22 c0       	rjmp	.+68     	; 0x8da <__stack+0x7b>
 896:	f7 fc       	sbrc	r15, 7
 898:	29 c0       	rjmp	.+82     	; 0x8ec <__stack+0x8d>
 89a:	89 2f       	mov	r24, r25
 89c:	80 53       	subi	r24, 0x30	; 48
 89e:	8a 30       	cpi	r24, 0x0A	; 10
 8a0:	70 f4       	brcc	.+28     	; 0x8be <__stack+0x5f>
 8a2:	f6 fe       	sbrs	r15, 6
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__stack+0x51>
 8a6:	98 9c       	mul	r9, r8
 8a8:	90 2c       	mov	r9, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	98 0e       	add	r9, r24
 8ae:	15 c0       	rjmp	.+42     	; 0x8da <__stack+0x7b>
 8b0:	e8 9c       	mul	r14, r8
 8b2:	e0 2c       	mov	r14, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	e8 0e       	add	r14, r24
 8b8:	f0 e2       	ldi	r31, 0x20	; 32
 8ba:	ff 2a       	or	r15, r31
 8bc:	0e c0       	rjmp	.+28     	; 0x8da <__stack+0x7b>
 8be:	9e 32       	cpi	r25, 0x2E	; 46
 8c0:	29 f4       	brne	.+10     	; 0x8cc <__stack+0x6d>
 8c2:	f6 fc       	sbrc	r15, 6
 8c4:	6b c1       	rjmp	.+726    	; 0xb9c <__stack+0x33d>
 8c6:	40 e4       	ldi	r20, 0x40	; 64
 8c8:	f4 2a       	or	r15, r20
 8ca:	07 c0       	rjmp	.+14     	; 0x8da <__stack+0x7b>
 8cc:	9c 36       	cpi	r25, 0x6C	; 108
 8ce:	19 f4       	brne	.+6      	; 0x8d6 <__stack+0x77>
 8d0:	50 e8       	ldi	r21, 0x80	; 128
 8d2:	f5 2a       	or	r15, r21
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	98 36       	cpi	r25, 0x68	; 104
 8d8:	49 f4       	brne	.+18     	; 0x8ec <__stack+0x8d>
 8da:	f2 01       	movw	r30, r4
 8dc:	23 fd       	sbrc	r18, 3
 8de:	95 91       	lpm	r25, Z+
 8e0:	23 ff       	sbrs	r18, 3
 8e2:	91 91       	ld	r25, Z+
 8e4:	2f 01       	movw	r4, r30
 8e6:	99 23       	and	r25, r25
 8e8:	09 f0       	breq	.+2      	; 0x8ec <__stack+0x8d>
 8ea:	b8 cf       	rjmp	.-144    	; 0x85c <vfprintf+0x6a>
 8ec:	89 2f       	mov	r24, r25
 8ee:	85 54       	subi	r24, 0x45	; 69
 8f0:	83 30       	cpi	r24, 0x03	; 3
 8f2:	18 f0       	brcs	.+6      	; 0x8fa <__stack+0x9b>
 8f4:	80 52       	subi	r24, 0x20	; 32
 8f6:	83 30       	cpi	r24, 0x03	; 3
 8f8:	38 f4       	brcc	.+14     	; 0x908 <__stack+0xa9>
 8fa:	44 e0       	ldi	r20, 0x04	; 4
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	a4 0e       	add	r10, r20
 900:	b5 1e       	adc	r11, r21
 902:	5f e3       	ldi	r21, 0x3F	; 63
 904:	59 83       	std	Y+1, r21	; 0x01
 906:	0f c0       	rjmp	.+30     	; 0x926 <__stack+0xc7>
 908:	93 36       	cpi	r25, 0x63	; 99
 90a:	31 f0       	breq	.+12     	; 0x918 <__stack+0xb9>
 90c:	93 37       	cpi	r25, 0x73	; 115
 90e:	79 f0       	breq	.+30     	; 0x92e <__stack+0xcf>
 910:	93 35       	cpi	r25, 0x53	; 83
 912:	09 f0       	breq	.+2      	; 0x916 <__stack+0xb7>
 914:	56 c0       	rjmp	.+172    	; 0x9c2 <__stack+0x163>
 916:	20 c0       	rjmp	.+64     	; 0x958 <__stack+0xf9>
 918:	f5 01       	movw	r30, r10
 91a:	80 81       	ld	r24, Z
 91c:	89 83       	std	Y+1, r24	; 0x01
 91e:	42 e0       	ldi	r20, 0x02	; 2
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	a4 0e       	add	r10, r20
 924:	b5 1e       	adc	r11, r21
 926:	61 01       	movw	r12, r2
 928:	01 e0       	ldi	r16, 0x01	; 1
 92a:	10 e0       	ldi	r17, 0x00	; 0
 92c:	12 c0       	rjmp	.+36     	; 0x952 <__stack+0xf3>
 92e:	f5 01       	movw	r30, r10
 930:	c0 80       	ld	r12, Z
 932:	d1 80       	ldd	r13, Z+1	; 0x01
 934:	f6 fc       	sbrc	r15, 6
 936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0xdf>
 938:	6f ef       	ldi	r22, 0xFF	; 255
 93a:	7f ef       	ldi	r23, 0xFF	; 255
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0xe3>
 93e:	69 2d       	mov	r22, r9
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	42 e0       	ldi	r20, 0x02	; 2
 944:	50 e0       	ldi	r21, 0x00	; 0
 946:	a4 0e       	add	r10, r20
 948:	b5 1e       	adc	r11, r21
 94a:	c6 01       	movw	r24, r12
 94c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <strnlen>
 950:	8c 01       	movw	r16, r24
 952:	5f e7       	ldi	r21, 0x7F	; 127
 954:	f5 22       	and	r15, r21
 956:	14 c0       	rjmp	.+40     	; 0x980 <__stack+0x121>
 958:	f5 01       	movw	r30, r10
 95a:	c0 80       	ld	r12, Z
 95c:	d1 80       	ldd	r13, Z+1	; 0x01
 95e:	f6 fc       	sbrc	r15, 6
 960:	03 c0       	rjmp	.+6      	; 0x968 <__stack+0x109>
 962:	6f ef       	ldi	r22, 0xFF	; 255
 964:	7f ef       	ldi	r23, 0xFF	; 255
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
 968:	69 2d       	mov	r22, r9
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	42 e0       	ldi	r20, 0x02	; 2
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	a4 0e       	add	r10, r20
 972:	b5 1e       	adc	r11, r21
 974:	c6 01       	movw	r24, r12
 976:	0e 94 d6 05 	call	0xbac	; 0xbac <strnlen_P>
 97a:	8c 01       	movw	r16, r24
 97c:	50 e8       	ldi	r21, 0x80	; 128
 97e:	f5 2a       	or	r15, r21
 980:	f3 fe       	sbrs	r15, 3
 982:	07 c0       	rjmp	.+14     	; 0x992 <__stack+0x133>
 984:	1a c0       	rjmp	.+52     	; 0x9ba <__stack+0x15b>
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	b3 01       	movw	r22, r6
 98c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 990:	ea 94       	dec	r14
 992:	8e 2d       	mov	r24, r14
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	08 17       	cp	r16, r24
 998:	19 07       	cpc	r17, r25
 99a:	a8 f3       	brcs	.-22     	; 0x986 <__stack+0x127>
 99c:	0e c0       	rjmp	.+28     	; 0x9ba <__stack+0x15b>
 99e:	f6 01       	movw	r30, r12
 9a0:	f7 fc       	sbrc	r15, 7
 9a2:	85 91       	lpm	r24, Z+
 9a4:	f7 fe       	sbrs	r15, 7
 9a6:	81 91       	ld	r24, Z+
 9a8:	6f 01       	movw	r12, r30
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	b3 01       	movw	r22, r6
 9ae:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 9b2:	e1 10       	cpse	r14, r1
 9b4:	ea 94       	dec	r14
 9b6:	01 50       	subi	r16, 0x01	; 1
 9b8:	10 40       	sbci	r17, 0x00	; 0
 9ba:	01 15       	cp	r16, r1
 9bc:	11 05       	cpc	r17, r1
 9be:	79 f7       	brne	.-34     	; 0x99e <__stack+0x13f>
 9c0:	ea c0       	rjmp	.+468    	; 0xb96 <__stack+0x337>
 9c2:	94 36       	cpi	r25, 0x64	; 100
 9c4:	11 f0       	breq	.+4      	; 0x9ca <__stack+0x16b>
 9c6:	99 36       	cpi	r25, 0x69	; 105
 9c8:	69 f5       	brne	.+90     	; 0xa24 <__stack+0x1c5>
 9ca:	f7 fe       	sbrs	r15, 7
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__stack+0x17f>
 9ce:	f5 01       	movw	r30, r10
 9d0:	20 81       	ld	r18, Z
 9d2:	31 81       	ldd	r19, Z+1	; 0x01
 9d4:	42 81       	ldd	r20, Z+2	; 0x02
 9d6:	53 81       	ldd	r21, Z+3	; 0x03
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <__stack+0x193>
 9de:	f5 01       	movw	r30, r10
 9e0:	80 81       	ld	r24, Z
 9e2:	91 81       	ldd	r25, Z+1	; 0x01
 9e4:	9c 01       	movw	r18, r24
 9e6:	44 27       	eor	r20, r20
 9e8:	37 fd       	sbrc	r19, 7
 9ea:	40 95       	com	r20
 9ec:	54 2f       	mov	r21, r20
 9ee:	82 e0       	ldi	r24, 0x02	; 2
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	a8 0e       	add	r10, r24
 9f4:	b9 1e       	adc	r11, r25
 9f6:	9f e6       	ldi	r25, 0x6F	; 111
 9f8:	f9 22       	and	r15, r25
 9fa:	57 ff       	sbrs	r21, 7
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__stack+0x1b1>
 9fe:	50 95       	com	r21
 a00:	40 95       	com	r20
 a02:	30 95       	com	r19
 a04:	21 95       	neg	r18
 a06:	3f 4f       	sbci	r19, 0xFF	; 255
 a08:	4f 4f       	sbci	r20, 0xFF	; 255
 a0a:	5f 4f       	sbci	r21, 0xFF	; 255
 a0c:	e0 e8       	ldi	r30, 0x80	; 128
 a0e:	fe 2a       	or	r15, r30
 a10:	ca 01       	movw	r24, r20
 a12:	b9 01       	movw	r22, r18
 a14:	a1 01       	movw	r20, r2
 a16:	2a e0       	ldi	r18, 0x0A	; 10
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	0e 94 18 06 	call	0xc30	; 0xc30 <__ultoa_invert>
 a1e:	d8 2e       	mov	r13, r24
 a20:	d2 18       	sub	r13, r2
 a22:	40 c0       	rjmp	.+128    	; 0xaa4 <__stack+0x245>
 a24:	95 37       	cpi	r25, 0x75	; 117
 a26:	29 f4       	brne	.+10     	; 0xa32 <__stack+0x1d3>
 a28:	1f 2d       	mov	r17, r15
 a2a:	1f 7e       	andi	r17, 0xEF	; 239
 a2c:	2a e0       	ldi	r18, 0x0A	; 10
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	1d c0       	rjmp	.+58     	; 0xa6c <__stack+0x20d>
 a32:	1f 2d       	mov	r17, r15
 a34:	19 7f       	andi	r17, 0xF9	; 249
 a36:	9f 36       	cpi	r25, 0x6F	; 111
 a38:	61 f0       	breq	.+24     	; 0xa52 <__stack+0x1f3>
 a3a:	90 37       	cpi	r25, 0x70	; 112
 a3c:	20 f4       	brcc	.+8      	; 0xa46 <__stack+0x1e7>
 a3e:	98 35       	cpi	r25, 0x58	; 88
 a40:	09 f0       	breq	.+2      	; 0xa44 <__stack+0x1e5>
 a42:	ac c0       	rjmp	.+344    	; 0xb9c <__stack+0x33d>
 a44:	0f c0       	rjmp	.+30     	; 0xa64 <__stack+0x205>
 a46:	90 37       	cpi	r25, 0x70	; 112
 a48:	39 f0       	breq	.+14     	; 0xa58 <__stack+0x1f9>
 a4a:	98 37       	cpi	r25, 0x78	; 120
 a4c:	09 f0       	breq	.+2      	; 0xa50 <__stack+0x1f1>
 a4e:	a6 c0       	rjmp	.+332    	; 0xb9c <__stack+0x33d>
 a50:	04 c0       	rjmp	.+8      	; 0xa5a <__stack+0x1fb>
 a52:	28 e0       	ldi	r18, 0x08	; 8
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	0a c0       	rjmp	.+20     	; 0xa6c <__stack+0x20d>
 a58:	10 61       	ori	r17, 0x10	; 16
 a5a:	14 fd       	sbrc	r17, 4
 a5c:	14 60       	ori	r17, 0x04	; 4
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	04 c0       	rjmp	.+8      	; 0xa6c <__stack+0x20d>
 a64:	14 fd       	sbrc	r17, 4
 a66:	16 60       	ori	r17, 0x06	; 6
 a68:	20 e1       	ldi	r18, 0x10	; 16
 a6a:	32 e0       	ldi	r19, 0x02	; 2
 a6c:	17 ff       	sbrs	r17, 7
 a6e:	08 c0       	rjmp	.+16     	; 0xa80 <__stack+0x221>
 a70:	f5 01       	movw	r30, r10
 a72:	60 81       	ld	r22, Z
 a74:	71 81       	ldd	r23, Z+1	; 0x01
 a76:	82 81       	ldd	r24, Z+2	; 0x02
 a78:	93 81       	ldd	r25, Z+3	; 0x03
 a7a:	44 e0       	ldi	r20, 0x04	; 4
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	08 c0       	rjmp	.+16     	; 0xa90 <__stack+0x231>
 a80:	f5 01       	movw	r30, r10
 a82:	80 81       	ld	r24, Z
 a84:	91 81       	ldd	r25, Z+1	; 0x01
 a86:	bc 01       	movw	r22, r24
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	42 e0       	ldi	r20, 0x02	; 2
 a8e:	50 e0       	ldi	r21, 0x00	; 0
 a90:	a4 0e       	add	r10, r20
 a92:	b5 1e       	adc	r11, r21
 a94:	a1 01       	movw	r20, r2
 a96:	0e 94 18 06 	call	0xc30	; 0xc30 <__ultoa_invert>
 a9a:	d8 2e       	mov	r13, r24
 a9c:	d2 18       	sub	r13, r2
 a9e:	8f e7       	ldi	r24, 0x7F	; 127
 aa0:	f8 2e       	mov	r15, r24
 aa2:	f1 22       	and	r15, r17
 aa4:	f6 fe       	sbrs	r15, 6
 aa6:	0b c0       	rjmp	.+22     	; 0xabe <__stack+0x25f>
 aa8:	5e ef       	ldi	r21, 0xFE	; 254
 aaa:	f5 22       	and	r15, r21
 aac:	d9 14       	cp	r13, r9
 aae:	38 f4       	brcc	.+14     	; 0xabe <__stack+0x25f>
 ab0:	f4 fe       	sbrs	r15, 4
 ab2:	07 c0       	rjmp	.+14     	; 0xac2 <__stack+0x263>
 ab4:	f2 fc       	sbrc	r15, 2
 ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__stack+0x263>
 ab8:	8f ee       	ldi	r24, 0xEF	; 239
 aba:	f8 22       	and	r15, r24
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <__stack+0x263>
 abe:	1d 2d       	mov	r17, r13
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <__stack+0x265>
 ac2:	19 2d       	mov	r17, r9
 ac4:	f4 fe       	sbrs	r15, 4
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__stack+0x283>
 ac8:	fe 01       	movw	r30, r28
 aca:	ed 0d       	add	r30, r13
 acc:	f1 1d       	adc	r31, r1
 ace:	80 81       	ld	r24, Z
 ad0:	80 33       	cpi	r24, 0x30	; 48
 ad2:	19 f4       	brne	.+6      	; 0xada <__stack+0x27b>
 ad4:	99 ee       	ldi	r25, 0xE9	; 233
 ad6:	f9 22       	and	r15, r25
 ad8:	08 c0       	rjmp	.+16     	; 0xaea <__stack+0x28b>
 ada:	1f 5f       	subi	r17, 0xFF	; 255
 adc:	f2 fe       	sbrs	r15, 2
 ade:	05 c0       	rjmp	.+10     	; 0xaea <__stack+0x28b>
 ae0:	03 c0       	rjmp	.+6      	; 0xae8 <__stack+0x289>
 ae2:	8f 2d       	mov	r24, r15
 ae4:	86 78       	andi	r24, 0x86	; 134
 ae6:	09 f0       	breq	.+2      	; 0xaea <__stack+0x28b>
 ae8:	1f 5f       	subi	r17, 0xFF	; 255
 aea:	0f 2d       	mov	r16, r15
 aec:	f3 fc       	sbrc	r15, 3
 aee:	14 c0       	rjmp	.+40     	; 0xb18 <__stack+0x2b9>
 af0:	f0 fe       	sbrs	r15, 0
 af2:	0f c0       	rjmp	.+30     	; 0xb12 <__stack+0x2b3>
 af4:	1e 15       	cp	r17, r14
 af6:	10 f0       	brcs	.+4      	; 0xafc <__stack+0x29d>
 af8:	9d 2c       	mov	r9, r13
 afa:	0b c0       	rjmp	.+22     	; 0xb12 <__stack+0x2b3>
 afc:	9d 2c       	mov	r9, r13
 afe:	9e 0c       	add	r9, r14
 b00:	91 1a       	sub	r9, r17
 b02:	1e 2d       	mov	r17, r14
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <__stack+0x2b3>
 b06:	80 e2       	ldi	r24, 0x20	; 32
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	b3 01       	movw	r22, r6
 b0c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b10:	1f 5f       	subi	r17, 0xFF	; 255
 b12:	1e 15       	cp	r17, r14
 b14:	c0 f3       	brcs	.-16     	; 0xb06 <__stack+0x2a7>
 b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
 b18:	1e 15       	cp	r17, r14
 b1a:	10 f4       	brcc	.+4      	; 0xb20 <__stack+0x2c1>
 b1c:	e1 1a       	sub	r14, r17
 b1e:	01 c0       	rjmp	.+2      	; 0xb22 <__stack+0x2c3>
 b20:	ee 24       	eor	r14, r14
 b22:	04 ff       	sbrs	r16, 4
 b24:	0f c0       	rjmp	.+30     	; 0xb44 <__stack+0x2e5>
 b26:	80 e3       	ldi	r24, 0x30	; 48
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	b3 01       	movw	r22, r6
 b2c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b30:	02 ff       	sbrs	r16, 2
 b32:	1d c0       	rjmp	.+58     	; 0xb6e <__stack+0x30f>
 b34:	01 fd       	sbrc	r16, 1
 b36:	03 c0       	rjmp	.+6      	; 0xb3e <__stack+0x2df>
 b38:	88 e7       	ldi	r24, 0x78	; 120
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e c0       	rjmp	.+28     	; 0xb5a <__stack+0x2fb>
 b3e:	88 e5       	ldi	r24, 0x58	; 88
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	0b c0       	rjmp	.+22     	; 0xb5a <__stack+0x2fb>
 b44:	80 2f       	mov	r24, r16
 b46:	86 78       	andi	r24, 0x86	; 134
 b48:	91 f0       	breq	.+36     	; 0xb6e <__stack+0x30f>
 b4a:	01 ff       	sbrs	r16, 1
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <__stack+0x2f3>
 b4e:	8b e2       	ldi	r24, 0x2B	; 43
 b50:	01 c0       	rjmp	.+2      	; 0xb54 <__stack+0x2f5>
 b52:	80 e2       	ldi	r24, 0x20	; 32
 b54:	f7 fc       	sbrc	r15, 7
 b56:	8d e2       	ldi	r24, 0x2D	; 45
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	b3 01       	movw	r22, r6
 b5c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <__stack+0x30f>
 b62:	80 e3       	ldi	r24, 0x30	; 48
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	b3 01       	movw	r22, r6
 b68:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b6c:	9a 94       	dec	r9
 b6e:	d9 14       	cp	r13, r9
 b70:	c0 f3       	brcs	.-16     	; 0xb62 <__stack+0x303>
 b72:	da 94       	dec	r13
 b74:	f1 01       	movw	r30, r2
 b76:	ed 0d       	add	r30, r13
 b78:	f1 1d       	adc	r31, r1
 b7a:	80 81       	ld	r24, Z
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	b3 01       	movw	r22, r6
 b80:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b84:	dd 20       	and	r13, r13
 b86:	a9 f7       	brne	.-22     	; 0xb72 <__stack+0x313>
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <__stack+0x337>
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	b3 01       	movw	r22, r6
 b90:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <fputc>
 b94:	ea 94       	dec	r14
 b96:	ee 20       	and	r14, r14
 b98:	c1 f7       	brne	.-16     	; 0xb8a <__stack+0x32b>
 b9a:	43 ce       	rjmp	.-890    	; 0x822 <vfprintf+0x30>
 b9c:	f3 01       	movw	r30, r6
 b9e:	66 81       	ldd	r22, Z+6	; 0x06
 ba0:	77 81       	ldd	r23, Z+7	; 0x07
 ba2:	cb 01       	movw	r24, r22
 ba4:	2b 96       	adiw	r28, 0x0b	; 11
 ba6:	e2 e1       	ldi	r30, 0x12	; 18
 ba8:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__epilogue_restores__>

00000bac <strnlen_P>:
 bac:	fc 01       	movw	r30, r24
 bae:	05 90       	lpm	r0, Z+
 bb0:	61 50       	subi	r22, 0x01	; 1
 bb2:	70 40       	sbci	r23, 0x00	; 0
 bb4:	01 10       	cpse	r0, r1
 bb6:	d8 f7       	brcc	.-10     	; 0xbae <strnlen_P+0x2>
 bb8:	80 95       	com	r24
 bba:	90 95       	com	r25
 bbc:	8e 0f       	add	r24, r30
 bbe:	9f 1f       	adc	r25, r31
 bc0:	08 95       	ret

00000bc2 <strnlen>:
 bc2:	fc 01       	movw	r30, r24
 bc4:	61 50       	subi	r22, 0x01	; 1
 bc6:	70 40       	sbci	r23, 0x00	; 0
 bc8:	01 90       	ld	r0, Z+
 bca:	01 10       	cpse	r0, r1
 bcc:	d8 f7       	brcc	.-10     	; 0xbc4 <strnlen+0x2>
 bce:	80 95       	com	r24
 bd0:	90 95       	com	r25
 bd2:	8e 0f       	add	r24, r30
 bd4:	9f 1f       	adc	r25, r31
 bd6:	08 95       	ret

00000bd8 <fputc>:
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	8c 01       	movw	r16, r24
 be2:	eb 01       	movw	r28, r22
 be4:	8b 81       	ldd	r24, Y+3	; 0x03
 be6:	81 ff       	sbrs	r24, 1
 be8:	1b c0       	rjmp	.+54     	; 0xc20 <fputc+0x48>
 bea:	82 ff       	sbrs	r24, 2
 bec:	0d c0       	rjmp	.+26     	; 0xc08 <fputc+0x30>
 bee:	2e 81       	ldd	r18, Y+6	; 0x06
 bf0:	3f 81       	ldd	r19, Y+7	; 0x07
 bf2:	8c 81       	ldd	r24, Y+4	; 0x04
 bf4:	9d 81       	ldd	r25, Y+5	; 0x05
 bf6:	28 17       	cp	r18, r24
 bf8:	39 07       	cpc	r19, r25
 bfa:	64 f4       	brge	.+24     	; 0xc14 <fputc+0x3c>
 bfc:	e8 81       	ld	r30, Y
 bfe:	f9 81       	ldd	r31, Y+1	; 0x01
 c00:	01 93       	st	Z+, r16
 c02:	f9 83       	std	Y+1, r31	; 0x01
 c04:	e8 83       	st	Y, r30
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <fputc+0x3c>
 c08:	e8 85       	ldd	r30, Y+8	; 0x08
 c0a:	f9 85       	ldd	r31, Y+9	; 0x09
 c0c:	80 2f       	mov	r24, r16
 c0e:	09 95       	icall
 c10:	89 2b       	or	r24, r25
 c12:	31 f4       	brne	.+12     	; 0xc20 <fputc+0x48>
 c14:	8e 81       	ldd	r24, Y+6	; 0x06
 c16:	9f 81       	ldd	r25, Y+7	; 0x07
 c18:	01 96       	adiw	r24, 0x01	; 1
 c1a:	9f 83       	std	Y+7, r25	; 0x07
 c1c:	8e 83       	std	Y+6, r24	; 0x06
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <fputc+0x4c>
 c20:	0f ef       	ldi	r16, 0xFF	; 255
 c22:	1f ef       	ldi	r17, 0xFF	; 255
 c24:	c8 01       	movw	r24, r16
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	1f 91       	pop	r17
 c2c:	0f 91       	pop	r16
 c2e:	08 95       	ret

00000c30 <__ultoa_invert>:
 c30:	fa 01       	movw	r30, r20
 c32:	aa 27       	eor	r26, r26
 c34:	28 30       	cpi	r18, 0x08	; 8
 c36:	51 f1       	breq	.+84     	; 0xc8c <__ultoa_invert+0x5c>
 c38:	20 31       	cpi	r18, 0x10	; 16
 c3a:	81 f1       	breq	.+96     	; 0xc9c <__ultoa_invert+0x6c>
 c3c:	e8 94       	clt
 c3e:	6f 93       	push	r22
 c40:	6e 7f       	andi	r22, 0xFE	; 254
 c42:	6e 5f       	subi	r22, 0xFE	; 254
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	af 4f       	sbci	r26, 0xFF	; 255
 c4c:	b1 e0       	ldi	r27, 0x01	; 1
 c4e:	3e d0       	rcall	.+124    	; 0xccc <__ultoa_invert+0x9c>
 c50:	b4 e0       	ldi	r27, 0x04	; 4
 c52:	3c d0       	rcall	.+120    	; 0xccc <__ultoa_invert+0x9c>
 c54:	67 0f       	add	r22, r23
 c56:	78 1f       	adc	r23, r24
 c58:	89 1f       	adc	r24, r25
 c5a:	9a 1f       	adc	r25, r26
 c5c:	a1 1d       	adc	r26, r1
 c5e:	68 0f       	add	r22, r24
 c60:	79 1f       	adc	r23, r25
 c62:	8a 1f       	adc	r24, r26
 c64:	91 1d       	adc	r25, r1
 c66:	a1 1d       	adc	r26, r1
 c68:	6a 0f       	add	r22, r26
 c6a:	71 1d       	adc	r23, r1
 c6c:	81 1d       	adc	r24, r1
 c6e:	91 1d       	adc	r25, r1
 c70:	a1 1d       	adc	r26, r1
 c72:	20 d0       	rcall	.+64     	; 0xcb4 <__ultoa_invert+0x84>
 c74:	09 f4       	brne	.+2      	; 0xc78 <__ultoa_invert+0x48>
 c76:	68 94       	set
 c78:	3f 91       	pop	r19
 c7a:	2a e0       	ldi	r18, 0x0A	; 10
 c7c:	26 9f       	mul	r18, r22
 c7e:	11 24       	eor	r1, r1
 c80:	30 19       	sub	r19, r0
 c82:	30 5d       	subi	r19, 0xD0	; 208
 c84:	31 93       	st	Z+, r19
 c86:	de f6       	brtc	.-74     	; 0xc3e <__ultoa_invert+0xe>
 c88:	cf 01       	movw	r24, r30
 c8a:	08 95       	ret
 c8c:	46 2f       	mov	r20, r22
 c8e:	47 70       	andi	r20, 0x07	; 7
 c90:	40 5d       	subi	r20, 0xD0	; 208
 c92:	41 93       	st	Z+, r20
 c94:	b3 e0       	ldi	r27, 0x03	; 3
 c96:	0f d0       	rcall	.+30     	; 0xcb6 <__ultoa_invert+0x86>
 c98:	c9 f7       	brne	.-14     	; 0xc8c <__ultoa_invert+0x5c>
 c9a:	f6 cf       	rjmp	.-20     	; 0xc88 <__ultoa_invert+0x58>
 c9c:	46 2f       	mov	r20, r22
 c9e:	4f 70       	andi	r20, 0x0F	; 15
 ca0:	40 5d       	subi	r20, 0xD0	; 208
 ca2:	4a 33       	cpi	r20, 0x3A	; 58
 ca4:	18 f0       	brcs	.+6      	; 0xcac <__ultoa_invert+0x7c>
 ca6:	49 5d       	subi	r20, 0xD9	; 217
 ca8:	31 fd       	sbrc	r19, 1
 caa:	40 52       	subi	r20, 0x20	; 32
 cac:	41 93       	st	Z+, r20
 cae:	02 d0       	rcall	.+4      	; 0xcb4 <__ultoa_invert+0x84>
 cb0:	a9 f7       	brne	.-22     	; 0xc9c <__ultoa_invert+0x6c>
 cb2:	ea cf       	rjmp	.-44     	; 0xc88 <__ultoa_invert+0x58>
 cb4:	b4 e0       	ldi	r27, 0x04	; 4
 cb6:	a6 95       	lsr	r26
 cb8:	97 95       	ror	r25
 cba:	87 95       	ror	r24
 cbc:	77 95       	ror	r23
 cbe:	67 95       	ror	r22
 cc0:	ba 95       	dec	r27
 cc2:	c9 f7       	brne	.-14     	; 0xcb6 <__ultoa_invert+0x86>
 cc4:	00 97       	sbiw	r24, 0x00	; 0
 cc6:	61 05       	cpc	r22, r1
 cc8:	71 05       	cpc	r23, r1
 cca:	08 95       	ret
 ccc:	9b 01       	movw	r18, r22
 cce:	ac 01       	movw	r20, r24
 cd0:	0a 2e       	mov	r0, r26
 cd2:	06 94       	lsr	r0
 cd4:	57 95       	ror	r21
 cd6:	47 95       	ror	r20
 cd8:	37 95       	ror	r19
 cda:	27 95       	ror	r18
 cdc:	ba 95       	dec	r27
 cde:	c9 f7       	brne	.-14     	; 0xcd2 <__ultoa_invert+0xa2>
 ce0:	62 0f       	add	r22, r18
 ce2:	73 1f       	adc	r23, r19
 ce4:	84 1f       	adc	r24, r20
 ce6:	95 1f       	adc	r25, r21
 ce8:	a0 1d       	adc	r26, r0
 cea:	08 95       	ret

00000cec <__prologue_saves__>:
 cec:	2f 92       	push	r2
 cee:	3f 92       	push	r3
 cf0:	4f 92       	push	r4
 cf2:	5f 92       	push	r5
 cf4:	6f 92       	push	r6
 cf6:	7f 92       	push	r7
 cf8:	8f 92       	push	r8
 cfa:	9f 92       	push	r9
 cfc:	af 92       	push	r10
 cfe:	bf 92       	push	r11
 d00:	cf 92       	push	r12
 d02:	df 92       	push	r13
 d04:	ef 92       	push	r14
 d06:	ff 92       	push	r15
 d08:	0f 93       	push	r16
 d0a:	1f 93       	push	r17
 d0c:	cf 93       	push	r28
 d0e:	df 93       	push	r29
 d10:	cd b7       	in	r28, 0x3d	; 61
 d12:	de b7       	in	r29, 0x3e	; 62
 d14:	ca 1b       	sub	r28, r26
 d16:	db 0b       	sbc	r29, r27
 d18:	0f b6       	in	r0, 0x3f	; 63
 d1a:	f8 94       	cli
 d1c:	de bf       	out	0x3e, r29	; 62
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	cd bf       	out	0x3d, r28	; 61
 d22:	09 94       	ijmp

00000d24 <__epilogue_restores__>:
 d24:	2a 88       	ldd	r2, Y+18	; 0x12
 d26:	39 88       	ldd	r3, Y+17	; 0x11
 d28:	48 88       	ldd	r4, Y+16	; 0x10
 d2a:	5f 84       	ldd	r5, Y+15	; 0x0f
 d2c:	6e 84       	ldd	r6, Y+14	; 0x0e
 d2e:	7d 84       	ldd	r7, Y+13	; 0x0d
 d30:	8c 84       	ldd	r8, Y+12	; 0x0c
 d32:	9b 84       	ldd	r9, Y+11	; 0x0b
 d34:	aa 84       	ldd	r10, Y+10	; 0x0a
 d36:	b9 84       	ldd	r11, Y+9	; 0x09
 d38:	c8 84       	ldd	r12, Y+8	; 0x08
 d3a:	df 80       	ldd	r13, Y+7	; 0x07
 d3c:	ee 80       	ldd	r14, Y+6	; 0x06
 d3e:	fd 80       	ldd	r15, Y+5	; 0x05
 d40:	0c 81       	ldd	r16, Y+4	; 0x04
 d42:	1b 81       	ldd	r17, Y+3	; 0x03
 d44:	aa 81       	ldd	r26, Y+2	; 0x02
 d46:	b9 81       	ldd	r27, Y+1	; 0x01
 d48:	ce 0f       	add	r28, r30
 d4a:	d1 1d       	adc	r29, r1
 d4c:	0f b6       	in	r0, 0x3f	; 63
 d4e:	f8 94       	cli
 d50:	de bf       	out	0x3e, r29	; 62
 d52:	0f be       	out	0x3f, r0	; 63
 d54:	cd bf       	out	0x3d, r28	; 61
 d56:	ed 01       	movw	r28, r26
 d58:	08 95       	ret

00000d5a <_exit>:
 d5a:	f8 94       	cli

00000d5c <__stop_program>:
 d5c:	ff cf       	rjmp	.-2      	; 0xd5c <__stop_program>
